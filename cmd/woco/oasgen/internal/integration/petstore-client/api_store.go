// Code generated by woco, DO NOT EDIT.

package client

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"
)

type StoreAPI api

func (a *StoreAPI) DeleteOrder(ctx context.Context, req *DeleteOrderRequest) (resp *http.Response, err error) {
	var (
		contentType string
		body        any
	)
	path := "/store/order/{orderId}"
	path = path[:13] + req.OrderId + path[13+9:]

	request, err := a.client.prepareRequest("DELETE", a.client.cfg.BasePath+path, contentType, body)
	if err != nil {
		return
	}
	resp, err = a.client.Do(request)
	if err != nil {
		return
	}
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if resp.StatusCode == http.StatusOK {
		return
	} else if resp.StatusCode >= 300 {
		err = errors.New(string(respBody))
	}

	return
}

func (a *StoreAPI) GetInventory(ctx context.Context) (ret map[string]int32, resp *http.Response, err error) {
	var (
		contentType string
		body        any
	)
	path := "/store/inventory"

	request, err := a.client.prepareRequest("GET", a.client.cfg.BasePath+path, contentType, body)
	if err != nil {
		return
	}
	accept := selectHeaderAccept([]string{"application/json"})
	request.Header.Set("Accept", accept)
	resp, err = a.client.Do(request)
	if err != nil {
		return
	}
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if resp.StatusCode == http.StatusOK {
		err = a.client.decode(respBody, &ret, resp.Header.Get("Content-Type"))
		if err == nil {
			return
		}
	} else if resp.StatusCode >= 300 {
		err = errors.New(string(respBody))
	}

	return
}

func (a *StoreAPI) GetOrderById(ctx context.Context, req *GetOrderByIdRequest) (ret *Order, resp *http.Response, err error) {
	var (
		contentType string
		body        any
	)
	path := "/store/order/{orderId}"
	path = path[:13] + strconv.FormatInt(int64(req.OrderId), 10) + path[13+9:]

	request, err := a.client.prepareRequest("GET", a.client.cfg.BasePath+path, contentType, body)
	if err != nil {
		return
	}
	accept := selectHeaderAccept([]string{"application/json", "application/xml"})
	request.Header.Set("Accept", accept)
	resp, err = a.client.Do(request)
	if err != nil {
		return
	}
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if resp.StatusCode == http.StatusOK {
		ret = new(Order)
		err = a.client.decode(respBody, ret, resp.Header.Get("Content-Type"))
		if err == nil {
			return
		}
	} else if resp.StatusCode >= 300 {
		err = errors.New(string(respBody))
	}

	return
}

func (a *StoreAPI) PlaceOrder(ctx context.Context, req *PlaceOrderRequest) (ret *Order, resp *http.Response, err error) {
	var (
		contentType string
		body        any
	)
	path := "/store/order"
	contentType = selectHeaderContentType([]string{"application/json"})
	body = req

	request, err := a.client.prepareRequest("POST", a.client.cfg.BasePath+path, contentType, body)
	if err != nil {
		return
	}
	accept := selectHeaderAccept([]string{"application/json", "application/xml"})
	request.Header.Set("Accept", accept)
	resp, err = a.client.Do(request)
	if err != nil {
		return
	}
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if resp.StatusCode == http.StatusOK {
		ret = new(Order)
		err = a.client.decode(respBody, ret, resp.Header.Get("Content-Type"))
		if err == nil {
			return
		}
	} else if resp.StatusCode >= 300 {
		err = errors.New(string(respBody))
	}

	return
}
