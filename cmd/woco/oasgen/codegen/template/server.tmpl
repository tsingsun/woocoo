{{/* gotype: github.com/tsingsun/woocoo/cmd/woco/oasgen/codegen.Graph */}}

{{ define "server" }}

    {{- with extend $ "Package" "server" -}}
        {{ template "header" . }}
    {{ end }}

{{ template "import" $ }}
import(
    "{{ .Config.Package }}"
)
{{ range .Nodes }}
    {{ $serviceName := pascal .Name }}
        {{ $pkgName := pkgName .Config.Package}}
// Register{{ $serviceName }}Handlers creates http.Handler with routing matching OpenAPI spec.
func Register{{ $serviceName }}Handlers(router *gin.Engine, si {{$pkgName}}.{{ $serviceName }}Server) *gin.Engine {
    {{- range .Operations }}
        router.{{ .Method }}("{{ .Path | oasUriToGinUri }}", wrap{{pascal .Name }}(si))
    {{- end }}
    return router
}
    {{ range .Operations }}
func wrap{{pascal .Name }}(si {{$pkgName}}.{{ $serviceName }}Server) func(c *gin.Context) {
    return func(c *gin.Context) {
        {{- if .HasRequest }}
            var req {{$pkgName}}.{{ .RequestName }}
            {{- if .Request.BindUri}}
            if err := c.ShouldBindUri(&req); err != nil {
                c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
                return
            }
            {{- end }}
            {{- if .Request.BindHeader}}
            if err := c.ShouldBindHeader(&req); err != nil {
                c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
                return
            }
            {{- end }}
            {{- if .Request.Bind}}
            if err := c.ShouldBind(&req); err != nil {
                c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
                return
            }
            {{- end }}
        {{- end }}
        {{- if .HasResponse }}
            resp, err := si.{{ .Name }}(c,{{ if .HasRequest }}&req, {{ end }})
            if err != nil {
                c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
                return
            }
            c.JSON(http.StatusOK, resp)
        {{- else }}
            err := si.{{ .Name }}(c,{{ if .HasRequest }}&req, {{ end }})
            if err != nil {
                c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
                return
            }
            c.JSON(http.StatusOK, gin.H{})
        {{- end }}
    }
}
    {{ end }}
{{ end }}

{{ end }}