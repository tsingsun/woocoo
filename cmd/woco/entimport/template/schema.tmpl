{{/* gotype: entgo.io/ent/entc/gen.Type */}}
package schema

import (
    "entgo.io/ent"
    "entgo.io/ent/dialect"
    "entgo.io/ent/dialect/entsql"
    "entgo.io/ent/schema"
    "entgo.io/ent/schema/field"
{{- if index $.Annotations "gql"}}
    "entgo.io/contrib/entgql"
{{- end}}
)

//{{$.Name}} holds the schema definition for the {{ $.Name }} entity.
type {{$.Name}} struct {
    ent.Schema
}

{{if $.Table -}}
func ({{$.Name}}) Annotations() []schema.Annotation {
    return []schema.Annotation{
        entsql.Annotation{Table: "{{$.Table}}"},
    }
}
{{- end}}

// Fields of the {{$.Name}}
func ({{$.Name}}) Fields() []ent.Field{
    return []ent.Field{
    {{- if $f:=$.ID}}
        {{- $str:=""}}
        {{- $str = printf "field.%s(%s)" (pascal (fieldTypeName $f)) (fieldParameters $f)}}
        {{- if $f.Default}}
            {{- $str = printf "%s.Default(%s)" $str (defaultValue $f)}}
        {{- end}}
        {{- if $f.Column.Size}}
            {{- $str = printf "%s.MaxLen(%d)" $str $f.Column.Size }}
        {{- end}}
        {{- if $f.Optional}}
            {{- $str = printf "%s.Optional()" $str}}
        {{- end}}
        {{- if $f.Nillable}}
            {{- $str = printf "%s.Nillable()" $str}}
        {{- end}}
        {{- if $f.Unique}}
            {{- $str = printf "%s.Unique()" $str}}
        {{- end}}
        {{- if $f.Comment}}
            {{- $str = printf "%s.Comment(\"%s\")" $str (clearComment $f)}}
        {{- end}}
        {{- if $f.Column.SchemaType}}
            {{- $str = printf "%s%s" $str (schemaType $f)}}
        {{- end}}
        {{- $order := entgqlOrderField $f }}
        {{- if $order }}
            {{- $str = printf "%s.Annotations(entgql.OrderField(\"%s\"))" $str $f.Name}}
        {{- end}}
        {{- if index $.Annotations "proto"}}
            {{- $str = printf "%s.Annotations(entgql.Field(%d))" $str 1}}
        {{- end}}
        {{$str}},
    {{- end}}
    {{- $keys:= 1}}
    {{- range $f := $.Fields}}
        {{- $str:=""}}
        {{- $str = printf "field.%s(%s)" (pascal (fieldTypeName $f)) (fieldParameters $f)}}
        {{- if $f.Default}}
            {{- $str = printf "%s.Default(%s)" $str (defaultValue $f)}}
        {{- end}}
        {{- if $f.Column.Size}}
            {{- $str = printf "%s.MaxLen(%d)" $str $f.Column.Size }}
        {{- end}}
        {{- if $f.Optional}}
            {{- $str = printf "%s.Optional()" $str}}
        {{- end}}
        {{- if $f.Nillable}}
            {{- $str = printf "%s.Nillable()" $str}}
        {{- end}}
        {{- if $f.Unique}}
            {{- $str = printf "%s.Unique()" $str}}
        {{- end}}
        {{- if $f.Comment}}
            {{- $str = printf "%s.Comment(\"%s\")" $str (clearComment $f)}}
        {{- end}}
        {{- if $f.Column.SchemaType}}
            {{- $str = printf "%s%s" $str (schemaType $f)}}
        {{- end}}
        {{- $order := entgqlOrderField $f }}
        {{- if $order }}
            {{- $str = printf "%s.Annotations(entgql.OrderField(\"%s\"))" $str $f.Name}}
        {{- end}}
        {{- if index $.Annotations "proto"}}
            {{- $keys = inc $keys}}
            {{- $str = printf "%s.Annotations(entproto.Field(%d))" $str $keys}}
        {{- end}}
        {{$str}},
    {{- end}}
    }
}

// Edges of the {{$.Name}}.
func ({{$.Name}}) Edges() []ent.Edge {
    return nil
}