// Code generated by woco, DO NOT EDIT.

package server

import (
	"net/http"

	"github.com/gin-gonic/gin"
	petstore_expanded "github.com/tsingsun/woocoo/cmd/woco/oasgen/internal/integration/petstore-expanded"
	"github.com/tsingsun/woocoo/web/handler"
)

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.RouterGroup, si petstore_expanded.Server) {
	router.POST("/pets", wrapAddPet(si))
	router.DELETE("/pets/:id", wrapDeletePet(si))
	router.GET("/pets/:id", wrapFindPetByID(si))
	router.GET("/pets", wrapFindPets(si))
}

func wrapAddPet(si petstore_expanded.Server) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req petstore_expanded.AddPetRequest
		if err := c.ShouldBind(&req.Body); err != nil {
			c.AbortWithError(http.StatusBadRequest, err)
			return
		}
		resp, err := si.AddPet(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapDeletePet(si petstore_expanded.Server) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req petstore_expanded.DeletePetRequest
		if err := c.ShouldBindUri(&req.UriParams); err != nil {
			c.AbortWithError(http.StatusBadRequest, err)
			return
		}
		err := si.DeletePet(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
	}
}

func wrapFindPetByID(si petstore_expanded.Server) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req petstore_expanded.FindPetByIDRequest
		if err := c.ShouldBindUri(&req.UriParams); err != nil {
			c.AbortWithError(http.StatusBadRequest, err)
			return
		}
		resp, err := si.FindPetByID(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapFindPets(si petstore_expanded.Server) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req petstore_expanded.FindPetsRequest
		if err := c.ShouldBind(&req.Body); err != nil {
			c.AbortWithError(http.StatusBadRequest, err)
			return
		}
		resp, err := si.FindPets(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}
